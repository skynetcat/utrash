#!/usr/bin/env bash


# =========================================
# VARIABLES
# =========================================
today="`date "+%d-%m-%Y"`"
TRASH_DIR="$HOME/.local/share/utrash"

# =========================================
# HELP
# =========================================
printHelp () {
  cat <<HELPPAGE
  Description:
    A simple trash script written in bash.

  Usage: utrash [ACTION] [SCOPE] [DATE] [EXTRA]
         utrash [FILE(S)]

  Action:
    -h, --help
      Print this help page.

    -e, --empty
      Empty the trash.

    -l, --list
      List trashed items.

    -r, --restore
      Restore item(s) to their original path.

  Scope:
    -d, --here
      Operate on this directory recursively.

    -D, --here-only
      Operate on this directory only (non recursive).

  Date:
    -t, --today
      Items trashed today.

    -p, --yesterday
      Items trashed yesterday.

    -m, --month
      Items trashed this month.

    -y, --year
      Items trashed this year.

  Extra:
    -c, --custom
      Use a custom restore directory instead of
      original directory.

    -fc, --from-custom
      Use actions on another directory instead of
      the current directory.

  Examples:
    1. utrash hello
        Trashes 'hello' file.

    2. utrash file1 file2 dir1
        Trashes file1, file2 and dir1.

    3. utrash *
        Trashes all files and directories 
        in the current directory.

    4. utrash -r 
        Select item(s) to recover using fzf.
HELPPAGE
}


# =========================================
# DIRECTORIES
# =========================================
checkDir () {
  if [[ ! -d "$1" ]]; then
    mkdir -p "$1"
  fi
}

checkDir "$TRASH_DIR"


# =========================================
# FUNCTIONS
# =========================================

err () {
  case "$1" in
    "date") 
      message="Nothing was trashed matching date specified."
      ;;

    "scope") 
      message="Nothing was trashed from here."
      ;;

    "action")
      message="Invalid action."
      ;;

    "empty")
      message="There is nothing in the trash."
      ;;

    *) 
      message="Unknown error."
      ;;
  esac

  echo "$message" 
}

empty () {
  read -rp "Are you sure you want to delete EVERYTHING in the trash? (y/N) " asked
  if [[ "$asked" =~ ^(y|Y|yes|Yes)$ ]]; then
    rm -rf "$TRASH_DIR"/*
    echo "Trash cleaned"
  else
    echo "Nothing was deleted"
  fi
}

absolutePath () {
  targetName="$1"
  dirName="`dirname "$2"`"
  echo "`cd "$dirName"; pwd`/$targetName"
}

fzfCmd () {
  fzfBindings=(
    "tab:toggle+up"
    "shift-tab:toggle+down"
    "ctrl-a:toggle-all"
  )

  allFzfBinds="`echo "${fzfBindings[@]@Q}" |\
    sed "s/^'//g; s/'$//g; s/' '/,/g"`"

  fzf -m \
    --tac \
    --bind="$allFzfBinds" \
    --header="[tab:toggleUp, S-tab:toggleDown, C-a:toggleAll]"
}

list(){
  actionCheck="$1"
  checkDate="$2"
  checkScope="$3"
  scope="$4"

  if [[ -f "$TRASH_DIR/record" ]] &&\
     [[ -s "$TRASH_DIR/record" ]]; then
    case "$actionCheck" in
      3)
        if [[ -n "$checkDate" ]]; then
          if [[ -n "$checkScope" ]]; then
            echo "$checkDate" |\
              grep "$scope" |\
              awk -F ":::" '{print $1}' |\
              fzfCmd
          else
            err scope
          fi
        else
          err date
        fi
        ;;

      2)
        if [[ -n "$checkDate" ]]; then
          echo "$checkDate" |\
            awk -F ":::" '{print $1}' |\
            fzfCmd
        else
          err date
        fi
        ;;

      1)
        if [[ -n "$checkScope" ]]; then
          echo "$checkScope" |\
            awk -F ":::" '{print $1}' |\
            fzfCmd
        else
          err scope
        fi
        ;;

      0)
        awk -F ":::" '{print $1}' \
          "$TRASH_DIR/record" |\
          fzfCmd
        ;;
      esac
  else
    err empty
  fi
}


# =========================================
# PROCESS ARGUMENTS
# =========================================

# Check if help option is the last and print help page then exit.
if [[ "${@: -1}" == "-h" ]] ||\
   [[ "${@: -1}" == "--help" ]]; then
  printHelp
  exit
fi

case "$1" in
  "-h"|"--help")
    printHelp
    exit
    ;;

  "-e"|"--empty")
    empty
    exit
    ;;

  "-r"|"--restore") 
    action="restore" 
    ;;

  "-l"|"--list") 
    action="list" 
    ;;

  -*)
    err action
    exit
    ;;

  *)
    if [[ "$#" -gt "0" ]]; then
      targets=($@)
    else
      echo "No items specified. Using fzf..."
      targets=($(fzfCmd))
    fi

    if [[ -n "$targets" ]]; then
      checkDir "$TRASH_DIR/$today"
      for target in "${targets[@]}"; do
        if [[ -f "$target" ]] ||\
           [[ -d "$target" ]]; then
           targetName="`basename "$target"`"
           path="`absolutePath "$targetName" "$target"`"
           echo "$today/$targetName:::$path" >> $TRASH_DIR/record
           mv "$path" "$TRASH_DIR/$today"
           echo "Trashed '$targetName'"
         else
           echo "Could not trash '$target' no such file or directory."
           exit
        fi
      done
    fi
    exit
    ;;
esac

shift

# Using binary for the check
actionCheck=0

while [[ $# > 0 ]]; do
  case "$1" in
    "-h"|"--help")
      printHelp
      exit
      ;;

    "-d"|"--here") 
      scope=":::`pwd`"
      actionCheck=$((actionCheck+1))
      shift
      ;;

    "-D"|"--here-only")
      scope=":::`pwd`[a-zA-Z0-9]*$"
      actionCheck=$((actionCheck+1))
      shift
      ;;

    "-t"|"--today") 
      date="^`date "+%d-%m-%Y"`/"
      actionCheck=$((actionCheck+2))
      shift
      ;;

    "-p"|"--yesterday")
      date="^`date -d "-1 day" "+%d-%m-%Y"`/"
      actionCheck=$((actionCheck+2))
      shift
      ;;
    
    "-m"|"--month")
      date="^`date "+..-%m-%Y"`/"
      actionCheck=$((actionCheck+2))
      shift
      ;;

    "-y"|"--year")
      date="^`date "+..-..-%Y"`/"
      actionCheck=$((actionCheck+2))
      shift
      ;;

    "-c"|"--custom")
      read -rp "Custom directory: " customDir
      shift
      ;;
    
    "-fc"|"--from-custom")
      read -rp "Custom directory: " fromCustomDir
      shift
      ;;
  esac
done


if [[ -n "$date" ]]; then
  checkDate="`grep "$date" "$TRASH_DIR/record"`"
fi

if [[ -n "$scope" ]]; then
  checkScope="`grep "$scope" "$TRASH_DIR/record"`"
fi

case "$action" in
  "list")
    list "$actionCheck" \
      "$checkDate" \
      "$checkScope" \
      "$scope"
    ;;

  "restore")
    fileList="`list "$actionCheck" \
      "$checkDate" \
      "$checkScope" \
      "$scope"`"

    checkError="`echo "$fileList" | grep "/"`"

    if [[ -n "$checkError" ]]; then
    echo "$fileList" |\
      while IFS= read -r target ; do 
        path="`grep "$target" "$TRASH_DIR/record"|\
          awk -F ":::" '{print $2}'`"
        mv "$TRASH_DIR/$target" "$path"
        sed -i "s|$target:::$path||g; /^$/d" "$TRASH_DIR/record"
        echo "$target => $path"
      done
    else
      err empty
    fi
  ;;
esac
