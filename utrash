#!/usr/bin/env bash

# =========================================
# HELP
# =========================================
printHelp () {
  cat <<HELPPAGE
  Description:
    A simple trash script written in bash.

  Usage: utrash [ACTION] [SCOPE] [DATE] [EXTRA]
         utrash [FILE(S)]

  Action:
    -h, --help
      Print this help page.

    -e, --empty
      Empty the trash.

    -l, --list
      List trashed items.

    -r, --restore
      Restore item(s) to their original path.

  Scope:
    -d, --here
      Operate on this directory recursively.

    -D, --here-only
      Operate on this directory only (non recursive).

  Date:
    -t, --today
      Items trashed today.

    -p, --yesterday
      Items trashed yesterday.

    -m, --month
      Items trashed this month.

    -y, --year
      Items trashed this year.

  Extra:
    -c, --custom
      Use a custom restore directory instead of
      original directory.

  Examples:
    1. utrash hello
        Trashes 'hello' file.

    2. utrash file1 file2 dir1
        Trashes file1, file2 and dir1.

    3. utrash *
        Trashes all files and directories 
        in the current directory.

    4. utrash -r 
        Select item(s) to recover using fzf.
HELPPAGE
}

# =========================================
# DIRECTORIES
# =========================================
checkDir () {
  if [[ ! -d "$1" ]]; then
    mkdir -p "$1"
  fi
}

TRASH_DIR="$HOME/.local/share/utrash"

checkDir "$TRASH_DIR"

# =========================================
# FUNCTIONS
# =========================================

err () {
  case "$1" in
    "date") 
      message="Nothing was trashed matching date specified."
      ;;

    "scope") 
      message="Nothing was trashed from here."
      ;;

    "action")
      message="Invalid action."
      ;;

    *) 
      message="Unknown error."
      ;;
  esac

  echo "$message" 
}

empty () {
  read -rp "Are you sure you want to delete EVERYTHING in the trash? (y/N) " asked
  if [[ "$asked" == "y" ]]; then
    rm -rf "$TRASH_DIR"/*
    echo "Trash cleaned"
  else
    echo "Nothing in the trash was deleted"
  fi
}

absolutePath () {
  targetName="$1"
  dirName="`dirname "$2"`"
  echo "`cd "$dirName"; pwd`/$targetName"
}

fzfCmd () {
  fzfBindings=(
    "tab:toggle+up"
    "shift-tab:toggle+down"
    "ctrl-a:toggle-all"
  )

  allFzfBinds="`echo "${fzfBindings[@]@Q}" |\
    sed "s/^'//g; s/'$//g; s/' '/,/g"`"

  fzf -m \
    --tac \
    --bind="$allFzfBinds" \
    --header="[tab:toggleUp, S-tab:toggleDown, C-a:toggleAll]"
}

# To be checked
#restore () {
#  if [[ -n "$1" ]]; then
#    cmd="find $TRASHCAN/$1 -maxdepth 1"
#  else
#    cmd="find $TRASHCAN/ -maxdepth 2"
#  fi
#
#  choice="`$cmd |\
#    sed "/.trash$/d; /[0-9]\{2\}-[0-9]\{2\}-[0-9]\{4\}$/d; /logfile$/d; s|$TRASHCAN/||g" |\
#    fzf --tac`"
#
#  if [[ -z "$choice" ]]; then
#    exit
#  fi
#
#  time="`echo "$choice" |\
#    awk -F '/' '{print $1}'`"
#
#  targetname="`echo "$choice" |\
#    awk -F '/' '{print $2}'`"
#
#  line="`grep --no-ignore-case \
#    "$targetname;;;" "$TRASHCAN/$time/logfile"`"
#
#  original_path="`echo "$line" |\
#    awk -F ';;;' '{print $2}'`"
#
#  mv "$TRASHCAN/$choice" "$original_path"
#
#  sed -i "s|$targetname;;;$original_path||g; /^$/d" "$TRASHCAN/$time/logfile"
#
#  echo "Moved '$targetname' back to '$original_path'"
#}

# =========================================
# PROCESS ARGUMENTS
# =========================================

# Check if help option is the last and print help page then exit.
if [[ "${@: -1}" == "-h" ]] ||\
   [[ "${@: -1}" == "--help" ]]; then
  printHelp
  exit
fi

case "$1" in
  "-h"|"--help")
    printHelp
    exit
    ;;

  "-e"|"--empty")
    empty
    exit
    ;;

  "-r"|"--restore") 
    action="restore" 
    ;;

  "-l"|"--list") 
    action="list" 
    ;;

  -*)
    err action
    exit
    ;;

*)
  if [[ "$#" -gt "0" ]]; then
    checkDir "$TRASH_DIR/$today"
    for target in "${@}"; do
      if [[ -f "$target" ]] || [[ -d "$target" ]]; then
        today="`date "+%d-%m-%Y"`"
        targetName="`basename "$target"`"
        path="`absolutePath "$targetName" "$target"`"
        echo "$today/$targetName:::$path" >> $TRASH_DIR/record
        mv "$path" "$TRASH_DIR/$today"
        echo "Trashed '$targetName'"
      else
        echo "Could not trash '$target' no such file or directory."
      fi
    done
  else
    echo "Please, specify an item to trash."
  fi
  exit
  ;;
esac

shift

# Using binary notation for the check
actionCheck=0

while [[ $# > 0 ]]; do
  case "$1" in
    "-h"|"--help")
      printHelp
      exit
      ;;

    "-d"|"--here") 
      scope=":::`pwd`"
      actionCheck=$((actionCheck+1))
      shift
      ;;

    "-D"|"--here-only")
      scope=":::`pwd`[a-zA-Z0-9]*$"
      actionCheck=$((actionCheck+1))
      shift
      ;;

    "-t"|"--today") 
      date="^`date "+%d-%m-%Y"`/"
      actionCheck=$((actionCheck+2))
      shift
      ;;

    "-p"|"--yesterday")
      date="^`date -d "-1 day" "+%d-%m-%Y"`/"
      actionCheck=$((actionCheck+2))
      shift
      ;;
    
    "-m"|"--month")
      date="^`date "+..-%m-%Y"`/"
      actionCheck=$((actionCheck+2))
      shift
      ;;

    "-y"|"--year")
      date="^`date "+..-..-%Y"`/"
      actionCheck=$((actionCheck+2))
      shift
      ;;

    "-c"|"--custom")
      read -rp "Custom directory: " customDir
      shift
      ;;
  esac
done

if [[ -n "$date" ]]; then
  checkDate="`grep "$date" "$TRASH_DIR/record"`"
fi

if [[ -n "$scope" ]]; then
  checkScope="`grep "$scope" "$TRASH_DIR/record"`"
fi

case "$action" in
  "list")
    if [[ -f "$TRASH_DIR/record" ]]; then

      case "$actionCheck" in
        3)
          if [[ -n "$checkDate" ]]; then
            if [[ -n "$checkScope" ]]; then
                echo "$checkDate" |\
                  grep "$scope" |\
                  awk -F ":::" '{print $1}' |\
                  fzfCmd
            else
              err scope
            fi
          else
            err date
          fi
          ;;

        2)
          ;;

        1) echo 1
          ;;

        0) echo 0
          ;;
      esac

      if [[ -n "$date" ]] && [[ -n "$scope" ]]; then
      elif [[ -n "$date" ]] && [[ -z "$scope" ]]; then
        if grep -q "^$date/" "$TRASH_DIR/record"; then
          grep "^$date/" "$TRASH_DIR/record" |\
            awk -F ":::" '{print $1}' |\
            fzfCmd
        else
          echo "Nothing was trashed matching date specified."
        fi
      elif [[ -z "$date" ]] && [[ -n "$scope" ]]; then
        if grep -q ":::`pwd`" "$TRASH_DIR/record"; then
          if [[ $recurse == 1 ]]; then
            grep ":::`pwd`" "$TRASH_DIR/record" |\
              awk -F ":::" '{print $1}' |\
              fzfCmd
          else
              grep ":::`pwd`[a-zA-Z0-9]*$" "$TRASH_DIR/record" |\
              awk -F ":::" '{print $1}' |\
              fzfCmd
          fi
        else
          echo "Nothing was trashed from here."
        fi
      else
        awk -F ":::" '{print $1}' \
          "$TRASH_DIR/record" |\
          fzfCmd
      fi
    else
      echo "There is nothing in the trash."
    fi
    ;;

  "restore")
  ;;
esac
