#!/usr/bin/env bash

# =========================================
# COLORS
# =========================================

colorize () {
  output="$1"
  color="$2"

  resetSeq="\001\033[0m\002"

  case "$output" in
    fg) output="3"
      ;;
    bg) output="4"
      ;;
    *) echo "Error: Unknown color output"
      ;;
  esac
  
  case $color in
    black)      color=0 ;;
    red)        color=1 ;;
    green)      color=2 ;;
    yellow)     color=3 ;;
    blue)       color=4 ;;
    purple)     color=5 ;;
    cyan)       color=6 ;;
    white)      color=7 ;;
    *) echo "Error: Unknown color" ;;
  esac

  echo -e "\x01\033[${output}${color}m\x02${@:3}${resetSeq}"
}


# =========================================
# ERROR MESSAGES
# =========================================
err () {
  case "$1" in
    "date") 
      message="Nothing was trashed matching date specified."
      ;;

    "scope") 
      message="Nothing was trashed from here."
      ;;

    "action")
      message="Invalid action."
      ;;

    "empty")
      message="There is nothing in the trash."
      ;;

    "config")
      message="No config file was found."
      ;;

    "notarget")
      message="Could not trash '$2' no such file or directory."
      ;;

    *) 
      message="Unknown error."
      ;;
  esac

  echo "`colorize fg red "Error:"` $message" 
}


# =========================================
# VARIABLES
# =========================================
today="`date "+%d-%m-%Y"`"
CONFIG_DIR="$HOME/.config/utrash"

# Check where the config file is.
if [[ -f "$CONFIG_DIR/config" ]]; then
  config="$CONFIG_DIR/config"
elif [[ -f "${0/%utrash/config}" ]]; then
  config="${0/%utrash/config}"
elif [[ -f "./config" ]]; then
  config="./config"
else
  err config
  exit
fi

# Source the config file
source "$config"


# =========================================
# HELP
# =========================================
actionHelp () {
  cat <<HELPPAGE
  -h, --help
    Print this help page.

  -e, --empty
    Empty the trash.
  
  -x, --erase
    Erase items from trash using fzf.

  -l, --list
    List trashed items.

  -r, --restore
    Restore item(s) to their original path.
HELPPAGE
}

printHelp () {
  cat <<HELPPAGE
Description:
  A simple trash script written in bash.

Usage: utrash [ACTION] [SCOPE] [DATE] [EXTRA]
       utrash [FILE(S)]

Action:
`actionHelp`

Scope:
  -d, --here
    Operate on this directory recursively.

  -D, --here-only
    Operate on this directory only (non recursive).

Date:
  -t, --today
    Items trashed today.

  -p, --yesterday
    Items trashed yesterday.

  -m, --month
    Items trashed this month.

  -y, --year
    Items trashed this year.

Extra:
  -c, --custom
    Use a custom restore directory instead of
    original directory.

  -fc, --from-custom
    Use actions on another directory instead of
    the current directory.

Examples:
  1. utrash hello
      Trashes 'hello' file.

  2. utrash file1 file2 dir1
      Trashes file1, file2 and dir1.

  3. utrash *
      Trashes all files and directories 
      in the current directory.

  4. utrash -r 
      Select item(s) to recover using fzf.
HELPPAGE
}


# =========================================
# CHECK DIRECTORIES
# =========================================
# if a directory does not exist, create it.
checkDir () {
  if [[ ! -d "$1" ]]; then
    mkdir -p "$1"
  fi
}

checkDir "$TRASH_DIR"
checkDir "$CONFIG_DIR"


# =========================================
# FUNCTIONS
# =========================================

empty () {
  read -rp "Are you sure you want to delete EVERYTHING in the trash? (y/N) " emptyAnswer
  if [[ "$emptyAnswer" =~ ^(y|Y|yes|Yes)$ ]]; then
    rm -rf "$TRASH_DIR"/*
    echo -e "\n`colorize fg purple "Trash cleaned"`"
  else
    echo "Nothing was deleted"
  fi
}

absolutePath () {
  targetName="$1"
  dirName="`dirname "$2"`"
  echo "`cd "$dirName"; pwd`/$targetName"
}

list(){
  sdCheck="$1"
  checkDate="$2"
  checkScope="$3"
  scope="$4"

  if [[ -f "$TRASH_DIR/record" ]] &&\
     [[ -s "$TRASH_DIR/record" ]]; then
    case "$sdCheck" in
      3)
        if [[ -n "$checkDate" ]]; then
          if [[ -n "$checkScope" ]]; then
            echo "$checkDate" |\
              grep "$scope" |\
              awk -F ":::" '{print $1}' |\
              fzfCmd
          else
            err scope
          fi
        else
          err date
        fi
        ;;

      2)
        if [[ -n "$checkDate" ]]; then
          echo "$checkDate" |\
            awk -F ":::" '{print $1}' |\
            fzfCmd
        else
          err date
        fi
        ;;

      1)
        if [[ -n "$checkScope" ]]; then
          echo "$checkScope" |\
            awk -F ":::" '{print $1}' |\
            fzfCmd
        else
          err scope
        fi
        ;;

      0)
        awk -F ":::" '{print $1}' \
          "$TRASH_DIR/record" |\
          fzfCmd
        ;;
      esac
  else
    err empty
  fi
}

# =========================================
# PROCESS ARGUMENTS
# =========================================

# Check if help option is the last and print help page then exit.
if [[ "${@: -1}" == "-h" ]] ||\
   [[ "${@: -1}" == "--help" ]]; then
  printHelp
  exit
fi

case "$1" in
  "-h"|"--help")
    printHelp
    exit
    ;;

  "-e"|"--empty")
    empty
    exit
    ;;
  
  "-x"|"--erase") 
    action="erase" 
    ;;

  "-r"|"--restore") 
    action="restore" 
    ;;

  "-l"|"--list") 
    action="list" 
    ;;

  -*)
    err action
    echo -e "\nAvailable actions:"
    actionHelp
    exit
    ;;

  *)
    if [[ "$#" -gt "0" ]]; then
      targets=($@)
    else
      echo "No items specified. Using fzf..."
      targets=($(fzfCmd))
    fi

    if [[ -n "$targets" ]]; then
      checkDir "$TRASH_DIR/$today"
      for target in "${targets[@]}"; do
        if [[ -f "$target" ]] ||\
           [[ -d "$target" ]]; then
           targetName="`basename "$target"`"
           path="`absolutePath "$targetName" "$target"`"
           echo "$today/$targetName:::$path" >> $TRASH_DIR/record
           mv "$path" "$TRASH_DIR/$today"
           echo "`colorize fg red "Trashed:"` $targetName"
         else
           err notarget "$target"
           exit
        fi
      done
    fi
    exit
    ;;
esac

shift

# Using binary for checking values of scope and
# date:
#   00     => no scope or date.
#   01     => date.
#   10 (2) => scope.
#   11 (3) => both scope and date.
sdCheck=0

while [[ $# > 0 ]]; do
  case "$1" in
    "-h"|"--help")
      printHelp
      exit
      ;;

    "-d"|"--here") 
      scope=":::`pwd`"
      sdCheck=$((sdCheck+1))
      shift
      ;;

    "-D"|"--here-only")
      scope=":::`pwd`[a-zA-Z0-9]*$"
      sdCheck=$((sdCheck+1))
      shift
      ;;

    "-t"|"--today") 
      date="^`date "+%d-%m-%Y"`/"
      sdCheck=$((sdCheck+2))
      shift
      ;;

    "-p"|"--yesterday")
      date="^`date -d "-1 day" "+%d-%m-%Y"`/"
      sdCheck=$((sdCheck+2))
      shift
      ;;
    
    "-m"|"--month")
      date="^`date "+..-%m-%Y"`/"
      sdCheck=$((sdCheck+2))
      shift
      ;;

    "-y"|"--year")
      date="^`date "+..-..-%Y"`/"
      sdCheck=$((sdCheck+2))
      shift
      ;;

    "-c"|"--custom")
      read -rp "Custom directory: " customDir
      shift
      ;;
    
    "-fc"|"--from-custom")
      read -rp "Custom directory: " fromCustomDir
      shift
      ;;
  esac
done


if [[ -n "$date" ]]; then
  checkDate="`grep "$date" "$TRASH_DIR/record"`"
fi

if [[ -n "$scope" ]]; then
  checkScope="`grep "$scope" "$TRASH_DIR/record"`"
fi

case "$action" in
  "list")
    list "$sdCheck" \
      "$checkDate" \
      "$checkScope" \
      "$scope"
    ;;

  "erase"|"restore")
    fileList="`list "$sdCheck" \
      "$checkDate" \
      "$checkScope" \
      "$scope"`"

    if [[ -z "$fileList" ]]; then
      exit
    fi

    checkError="`echo "$fileList" | grep "/"`"

    if [[ -n "$checkError" ]]; then
      if [[ "$action" == "restore" ]]; then
        echo "$fileList" |\
          while IFS= read -r target ; do 
            path="`grep "$target" "$TRASH_DIR/record"|\
              awk -F ":::" '{print $2}'`"
            mv "$TRASH_DIR/$target" "$path"
            sed -i "s|$target:::$path||g; /^$/d" "$TRASH_DIR/record"
            echo "`colorize fg green $target` => $path"
          done
      elif [[ "$action" == "erase" ]]; then
        echo -e "$fileList\n"
        read -rp "Are you ABSOLUTELY sure you want to erase these files? (y/N) " eraseAnswer
        echo ""
        if [[ "$eraseAnswer" =~ (y|Y|yes|Yes) ]]; then
          echo "$fileList" |\
            while IFS= read -r target ; do 
              path="`grep "$target" "$TRASH_DIR/record"|\
                awk -F ":::" '{print $2}'`"
              rm -rf "$TRASH_DIR/$target"
              sed -i "s|$target:::$path||g; /^$/d" "$TRASH_DIR/record"
              echo "` colorize fg purple "Erased:"` $target"
            done
        else
          echo "Aborted"
          exit
        fi 
      fi
    else
      err empty
    fi
  ;;
esac
