#!/usr/bin/env bash

# =========================================
# HELP
# =========================================
printHelp () {
  cat <<HELPPAGE
  Description:
    A simple trash script written in bash.

  Usage: utrash [ACTION] [SCOPE] [DATE] [EXTRA]
         utrash [FILE(S)]

  Action:
    -h, --help
      Print this help page.

    -e, --empty
      Empty the trash.

    -l, --list
      List trashed items.

    -r, --restore
      Restore item(s) to their original path.

  Scope:
    -d, --here
      Operate on this directory recursively

    -D, --here-only
      Operate on this directory only (non recursive)

  Date:
    -t, --today
    -p, --yesterday
    -w, --week
    -m, --month
    -y, --year

  Extra:
    -c, --custom
      use a custom restore directory instead of
      original directory.

    --fzf
      use fzf

  Examples:
    1. utrash hello
        Trashes 'hello' file.

    2. utrash file1 file2 dir1
        Trashes file1, file2 and dir1.

    3. utrash *
        Trashes all files and directories 
        in the current directory.

    4. utrash -r 
        Select item(s) to recover using fzf.
HELPPAGE
}

# =========================================
# DIRECTORIES
# =========================================
TRASH_DIR="$HOME/.local/share/utrash"

checkDir () {
  if [[ ! -d "$1" ]]; then
    mkdir -p "$1"
  fi
}

checkDir "$TRASH_DIR"

# =========================================
# FUNCTIONS
# =========================================
empty () {
  read -rp "Are you sure you want to delete EVERYTHING in the trash? (y/N) " asked
  if [[ "$asked" == "y" ]]; then
    rm -rf "$TRASH_DIR"/*
    echo "Trash cleaned"
  else
    echo "Nothing in the trash was deleted"
  fi
}

absolutePath () {
  targetName="$1"
  dirName="`dirname "$2"`"
  echo "`cd "$dirName"; pwd`/$targetName"
}

fzfCmd () {
  fzfBindings=(
    "tab:toggle+up"
    "shift-tab:toggle+down"
    "ctrl-a:toggle-all"
  )

  allFzfBinds="`echo "${fzfBindings[@]@Q}" |\
    sed "s/^'//g; s/'$//g; s/' '/,/g"`"

  fzf -m \
    --bind="$allFzfBinds" \
    --header="[tab:toggleUp, S-tab:toggleDown, C-a:toggleAll]"
}

# =========================================
# PROCESS ARGUMENTS
# =========================================

# Check help option and print help page then exit.
checkHelp="`echo "$@" | grep -- "-h\|--help"`"
if [ -n "$checkHelp" ]; then
  printHelp
  exit
fi

while [[ $# > 0 ]]; do
  case "$1" in
    "-e"|"--empty")
      empty
      exit
      ;;

    "-r"|"--restore") 
      action="restore" 
      shift
      ;;

    "-l"|"--list") 
      action="list" 
      shift
      ;;

    "-d"|"--here") 
      scope="`pwd`"
      shift
      ;;

    "-D"|"--here-only")
      scope="`pwd`"
      recurse=1
      shift
      ;;

    "-t"|"--today") 
      date="`date "+%d-%m-%Y"`"
      shift
      ;;

    "-p"|"--yesterday")
      date="`date -d "-1 day" "+%d-%m-%Y"`"
      shift
      ;;
    
    "-w"|"--week")
      date="`date -d "-1 week" "+%d-%m-%Y"`"
      shift
      ;;
    
    "-m"|"--month")
      date="`date -d "-1 month" "+%d-%m-%Y"`"
      shift
      ;;

    "-y"|"--year")
      date="`date -d "-1 year" "+%d-%m-%Y"`"
      shift
      ;;

    "--fzf")
      useFzf=1
      shift
      ;;

    "-c"|"--custom")
      read -rp "Custom directory: " customDir
      shift
      ;;

    *)
      if [[ "$#" -gt "0" ]]; then
        checkDir "$TRASH_DIR/$today"
        for target in "${@}"; do
          if [[ -f "$target" ]] || [[ -d "$target" ]]; then
            targetName="`basename "$target"`"
            path="`absolutePath "$targetName" "$target"`"
            echo "$today/$targetName;;;$path" >> $TRASH_DIR/record
            mv "$path" "$TRASH_DIR/$today"
            echo "Trashed '$targetName'"
          else
            echo "Could not trash '$target' no such file or directory."
          fi
        done
      else
        echo "Please, specify an item to trash."
      fi
      exit
      ;;
  esac
done
  
#  case "$1" in
#
#    "-l"|"--list")
#      if [[ -f "$TRASH_DIR/record" ]] || ! grep -q "[^[:space:]]" "$TRASH_DIR/record"; then
#
#        cat "$TRASH_DIR/record" |\
#          awk -F ";;;" '{print $1}' |\
#          fzfCmd
#                else
#                  echo "There is nothing in the trash."
#      fi
#      ;;
#
#    "-lh"|"--list-here")
#      if grep -q ";;;`pwd`" "$TRASH_DIR/record"; then
#        cat "$TRASH_DIR/record" |\
#          grep --color=never ";;;`pwd`" |\
#          awk -F ";;;" '{print $1}' |\
#          fzfCmd
#                else
#                  echo "Nothing was trashed from here."
#      fi
#      ;;
#
#    "-lt"|"--list-today")
#      if grep -q "^$today/" "$TRASH_DIR/record"; then
#        cat "$TRASH_DIR/record" |\
#          grep --color=never "^$today/" |\
#          awk -F ";;;" '{print $1}' |\
#          fzfCmd
#                else
#                  echo "Nothing was trashed today."
#      fi
#      ;;
#
#    "-ly"|"--list-yesterday")
#      if grep -q "^$yesterday" "$TRASH_DIR/record"; then
#        cat "$TRASH_DIR/record" |\
#          grep --color=never "^$yesterday/" |\
#          awk -F ";;;" '{print $1}' |\
#          fzfCmd
#                else
#                  echo "Nothing was trashed yesterday."
#      fi
#      ;;
#
#  esac
