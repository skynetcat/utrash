#!/usr/bin/env bash

# =========================================
# HELP
# =========================================
printHelp () {
  cat <<HELPPAGE
  Description:
    A simple trash script written in bash.

  Usage: utrash [OPTION]/[FILE(S)]

  Options:
    -h, --help
      Print this help page.

    -e, --empty
      Empty the trash.

    -r, --restore
      Restore item(s) to their original path.

    -rh, --restore-here
      Restore item(s) trashed from here to their
      original path.
    
    -rt, --restore-today
      Restore item(s) trashed today to their 
      original path.

    -ry, --restore-yesterday
      Restore item(s) trashed yesterday to their 
      original path.

    -c, --custom
      Used in combination with restore options to
      restore in a custom directory.

    -l, --list
      List trashed items.

    -lh, --list-here
      List items trashed from here.

    -lt, --list-today
      List items trashed today.

    -ly, --list-yesterday
      List items trashed yesterday.

  Examples:
    1. utrash hello
        Trashes 'hello' file.

    2. utrash file1 file2 dir1
        Trashes file1, file2 and dir1.

    3. utrash *
        Trashes all files and directories 
        in the current directory.

    4. utrash -r 
        Select item(s) to recover using fzf.
HELPPAGE
}

# =========================================
# VARIABLES
# =========================================
today="`date "+%d-%m-%Y"`"
yesterday="`date -d "-1 day" "+%d-%m-%Y"`"

# =========================================
# DIRECTORIES
# =========================================
TRASH_DIR="$HOME/.local/share/utrash"

checkDir () {
  if [[ ! -d "$1" ]]; then
    mkdir -p "$1"
  fi
}

checkDir "$TRASH_DIR"

# =========================================
# FUNCTIONS
# =========================================
empty () {
  read -rp "Are you sure you want to delete EVERYTHING in the trash? (y/N) " asked
  if [[ "$asked" == "y" ]]; then
    rm -rf "$TRASH_DIR"/*
    echo "Trash cleaned"
  else
    echo "Nothing in the trash was deleted"
  fi
}

absolutePath () {
  targetName="$1"
  dirName="`dirname "$2"`"
  echo "`cd "$dirName"; pwd`/$targetName"
}

fzfCmd () {
  fzfBindings=(
    "tab:toggle+up"
    "shift-tab:toggle+down"
    "ctrl-a:toggle-all"
  )

  allFzfBinds="`echo "${fzfBindings[@]@Q}" |\
    sed "s/^'//g; s/'$//g; s/' '/,/g"`"

  fzf -m \
    --bind="$allFzfBinds" \
    --header="[tab:toggleUp, S-tab:toggleDown, C-a:toggleAll]"
}

# =========================================
# OPTIONS
# =========================================
case "$1" in
  "-h"|"--help") printHelp ;;

  "-e"|"--empty") empty ;;

  "-r"|"--restore") ;;
  "-rh"|"--restore-here") ;;
  "-rt"|"--restore-today") ;;
  "-ry"|"--restore-yesterday") ;;

  "-l"|"--list")
    if [[ -f "$TRASH_DIR/record" ]] || ! grep -q "[^[:space:]]" "$TRASH_DIR/record"; then
     
      cat "$TRASH_DIR/record" |\
        awk -F ";;;" '{print $1}' |\
        fzfCmd
    else
      echo "There is nothing in the trash."
    fi
    ;;

  "-lh"|"--list-here")
    if grep -q ";;;`pwd`" "$TRASH_DIR/record"; then
      cat "$TRASH_DIR/record" |\
        grep --color=never ";;;`pwd`" |\
        awk -F ";;;" '{print $1}' |\
        fzfCmd
    else
      echo "Nothing was trashed from here."
    fi
    ;;

  "-lt"|"--list-today")
    if grep -q "^$today/" "$TRASH_DIR/record"; then
      cat "$TRASH_DIR/record" |\
        grep --color=never "^$today/" |\
        awk -F ";;;" '{print $1}' |\
        fzfCmd
    else
      echo "Nothing was trashed today."
    fi
    ;;

  "-ly"|"--list-yesterday")
    if grep -q "^$yesterday" "$TRASH_DIR/record"; then
      cat "$TRASH_DIR/record" |\
        grep --color=never "^$yesterday/" |\
        awk -F ";;;" '{print $1}' |\
        fzfCmd
    else
      echo "Nothing was trashed yesterday."
    fi
    ;;

  *)
    if [[ "$#" -gt "0" ]]; then
      checkDir "$TRASH_DIR/$today"
      for target in "${@}"; do
        if [[ -f "$target" ]] || [[ -d "$target" ]]; then
          targetName="`basename "$target"`"
          path="`absolutePath "$targetName" "$target"`"
          echo "$today/$targetName;;;$path" >> $TRASH_DIR/record
          mv "$path" "$TRASH_DIR/$today"
          echo "Trashed '$targetName'"
        else
          echo "Could not trash '$target' no such file or directory."
        fi
      done
    else
      echo "Please, specify an item to trash."
    fi
    ;;
esac
